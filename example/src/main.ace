main(): int {
    i: int = 0;

    i += generic_argument_deduction();
    assert i == 2;

    i += referencing();
    assert i == 9;

    i += compound_assignment();
    assert i == 20;

    i += member_compound_assignment();
    assert i == 46;

    i += boxed_member_compound_assignment();
    assert i == 50;

    i += boxed_self();
    assert i == 62;

    i += self_type();
    assert i == 64;

    i += traits();
    assert i == 66;

    i += static_trait_dispatch();
    assert i == 75;

    i += dyn_trait_dispatch();
    assert i == 79;

    i += vtbl_lookup();
    assert i == 88;

    i += constraint();
    assert i == 90;

    std::print_int(0);
    ret 0;
}

pub ::
Vector2: pub struct {
    x: int, 
    y: int,
}

Generic[T]: struct {
    field: T
}

Constraint: trait {
    self ::
    get(): Self;
}

impl Constraint for int {
    self ::
    get(): Self {
        ret self;
    }
}

constrained[T](value: &T): T where T: Constraint {
    ret value.get();
}

constraint(): int {
    ret constrained(2);
}

vtbl_lookup(): int {
    dyn: *Dyn = box 9;
    dyn_weak: ~Dyn = dyn;
    dyn_locked: *Dyn = lock dyn_weak;
    ret dyn_locked.value();
}

Dyn: trait {
    *self ::
    ten(): int;

    *self ::
    value(): int;

    self ::
    self_value(): int;
}

impl Dyn for int {
    *self ::
    ten(): int {
        ret 10;
    }

    *self ::
    value(): int {
        ret unbox self;
    }

    self ::
    self_value(): int {
        ret self;
    }
}

dyn_trait_dispatch(): int {
    dyn: *Dyn = box 4;
    ret dyn.value();
}

Size: trait {
    size(): Self;
}

size[T](): T
where T: Size {
    ret T::size();
}

impl Size for int {
    size(): Self {
        ret 8;
    }
}

impl Size for i8 {
    size(): Self {
        ret 1i8;
    }
}

static_trait_dispatch(): int {
    ret size[int]() + cast[int](size[i8]());
}

pub ::
Animal: trait {
    new(): Self;

    self ::
    trait_method[T, U](): Wrapper[T];
}

pub ::
Cow: struct {
    value: int
}

impl Animal for Cow {
    new(): Self {
        ret new Self { value: 2 };
    }

    self ::
    trait_method[T, U](): Wrapper[T] {
        ret new Wrapper[T] { value: self.value };
    }
}

traits(): int {
    i: int = 0;

    cow: Cow = Cow::new();
    i += cow.trait_method[int, int]().value;
    assert i == 2;

    animal:      *Animal = box new Cow { value: 5 };
    weak_animal: ~Animal = animal;

    ret i;
}

impl[T] Generic[T] {
    new(field: int): Self {
        ret new Self { field };
    }
}

impl Node {
    new(value: int): Self {
        ret new Self { value };
    }
}

self_type(): int {
    ret Node::new(5).value - Generic[int]::new(3).field;
}

pub ::
Node: struct {
    value: int
}

impl Node {
    self ::
    value(): int {
        ret self.value;
    }

    *self ::
    area(): int {
        ret self.value * self.value;
    }
}

boxed_self(): int {
    i: int = 0;

    node: Node = new Node { value: 3 };
    i += node.value();
    assert i == 3;

    boxed_node: *Node = box node;
    i += boxed_node.area();
    assert i == 12;

    ret i;
}

boxed_member_compound_assignment(): int {
    value: Vector2 = new Vector2 { x: 0, y: 2 };

    boxed_value: *Vector2 = box value;
    boxed_value.y *= 2;

    ret boxed_value.y;
}

member_compound_assignment(): int {
    value: Vector2 = new Vector2 { x: 0, y: 27 };
    value.y -= 1;
    ret value.y;
}

compound_assignment(): int {
    i: int = 10;
    increment_int(i);
    ret i;
}

increment_vector_2(value: &Vector2): void {
    value.x += 1;
    value.y += 1;
}

increment_int(value: &int): void {
    value += 1;
}

referencing(): int {
    i: int = 0;

    increment_int(i);
    assert i == 1;

    vec: Vector2 = new Vector2 { x: 1, y: 3 };
    increment_vector_2(vec);
    assert vec.x == 2;
    assert vec.y == 4;

    i += vec.x;
    i += vec.y;
    assert i == 7;

    ret i;
}

Wrapper[T]: struct {
    value: T
}

unwrap[T](wrapped: Wrapper[T]): T {
    ret wrapped.value;
}

generic_argument_deduction(): int {
    wrapped: Wrapper[int] = new Wrapper[int] { value: 2 }; 
    ret unwrap(wrapped);
}

lib: mod {
    pub ::
    Type: struct {
        field: int
    }

    impl Type {
        pub ::
        new(field: int): Self {
            ret new Self { field };
        }

        pub self ::
        field(): int { 
            ret self.field;
        }
    }

    pub ::
    func(): int {
        ret -5;
    }

    private: mod {
        func(): int {
            obj: lib::Type = new lib::Type { field: 1 };
            ret obj.field;
        }
    }
}

pub ::
lib::nested: mod {
}

pub ::
lib::nested: mod {
    pub ::
    func(): int {
        ret -10;
    }
}

fizz_buzz(n: int): int {
    i: int = 1;
    while i <= n {
        is_divisable_by_three: bool = i % 3 == 0;
        is_divisable_by_five:  bool = i % 5 == 0;

        if is_divisable_by_three {
            if is_divisable_by_five {
                std::print_int(88881111);
            } else {
                std::print_int(8888);
            }
        } else {
            if is_divisable_by_five {
                std::print_int(1111);
            } else {
                std::print_int(i);
            }
        }

        i += 1;
    }

    ret 0;
}

control_flow_analysis_1(): int {
    if false {
        ret 15;
    } else {
        ret 16;
    }
}

control_flow_analysis_2(): int {
    while true {
        ret 12;
    }

    ret 16;
}

impl[T] Generic[T] {
    pub self ::
    field(): T {
        ret self.field;
    }
}

generic_associated_func(): int {
    obj: Generic[int] = new Generic[int] { field: 4 };
    ret obj.field();
}

impl[T] Generic[T] {
    func(): void {
        std::print_int(15);
    }

    generic_func[U](): void {
        std::print_int(25);
    }
}

generic_associated_generic_func(): int {
    Generic[int]::func();
    Generic[int]::generic_func[std::Ptr]();
    ret 10;
}

impl Vector2 {
    self ::
    func[T](): void { 
    }
}

associated_generic_func(): int {
    vec: Vector2 = new Vector2 { x: 0, y: 0 };
    vec.func[int]();
    ret vec.x + vec.y;
}

reference_counting(): int {
    strong: *Vector2 = box new Vector2 { x: 16, y: 10 };
    std::print_int(strong.x);

    weak: ~Vector2 = strong;

    locked: *Vector2 = lock weak;
    std::print_int(locked.y);

    unboxed_value: Vector2 = unbox locked;
    std::print_int(unboxed_value.y);

    ret 0;
}

multiple_indirection(): int {
    vec_1: *Vector2 = box new Vector2 { x: -7, y: 4 };
    vec_2: **Vector2 = box vec_1;
    vec_3: &**Vector2 = vec_2;

    ret vec_3.x;
}

op_associativity(): int {
    ret 1 * -100 + 50 / 10 / 5;
}

global_value: int;
global(): int {
    global_value = -9843;
    ret global_value;
}

implicit_conversion_with_binary_op(): int {
    i: i32 = 5i32 + 9i16;
    ret 0;
}
