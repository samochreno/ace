std: module -> pub {
    Int8: struct -> pub {
    }

    impl i8 {
        from_i16(value: i16): i8 -> pub extern;

        from_i32(value: i32): i8 -> pub extern;

        from_i64(value: i64): i8 -> pub extern;

        from_u8(value: u8): i8 -> pub extern;

        from_u16(value: u16): i8 -> pub extern;

        from_u32(value: u32): i8 -> pub extern;

        from_u64(value: u64): i8 -> pub extern;

        from_int(value: int): i8 -> pub extern;

        from_f32(value: f32): i8 -> pub extern;

        from_f64(value: f64): i8 -> pub extern;

        operator +(self: i8): i8 -> pub extern;

        operator -(self: i8): i8 -> pub extern;

        operator ~(self: i8): i8 -> pub extern;

        operator *(lhs: i8, rhs: i8): i8 -> pub extern;

        operator /(lhs: i8, rhs: i8): i8 -> pub extern;

        operator %(lhs: i8, rhs: i8): i8 -> pub extern;

        operator +(lhs: i8, rhs: i8): i8 -> pub extern;

        operator -(lhs: i8, rhs: i8): i8 -> pub extern;

        operator >>(lhs: i8, rhs: i8): i8 -> pub extern;

        operator <<(lhs: i8, rhs: i8): i8 -> pub extern;

        operator <(lhs: i8, rhs: i8): bool -> pub extern;

        operator >(lhs: i8, rhs: i8): bool -> pub extern;

        operator <=(lhs: i8, rhs: i8): bool -> pub extern;

        operator >=(lhs: i8, rhs: i8): bool -> pub extern;

        operator ==(lhs: i8, rhs: i8): bool -> pub extern;

        operator !=(lhs: i8, rhs: i8): bool -> pub extern;

        operator &(lhs: i8, rhs: i8): i8 -> pub extern;

        operator ^(lhs: i8, rhs: i8): i8 -> pub extern;

        operator |(lhs: i8, rhs: i8): i8 -> pub extern;
    }

    Int16: struct -> pub {
    }

    impl i16 {
        from_i8(value: i8): i16 -> pub extern;

        from_i32(value: i32): i16 -> pub extern;

        from_i64(value: i64): i16 -> pub extern;

        from_u8(value: u8): i16 -> pub extern;

        from_u16(value: u16): i16 -> pub extern;

        from_u32(value: u32): i16 -> pub extern;

        from_u64(value: u64): i16 -> pub extern;

        from_int(value: int): i16 -> pub extern;

        from_f32(value: f32): i16 -> pub extern;

        from_f64(value: f64): i16 -> pub extern;

        operator +(self: i16): i16 -> pub extern;

        operator -(self: i16): i16 -> pub extern;

        operator ~(self: i16): i16 -> pub extern;

        operator *(lhs: i16, rhs: i16): i16 -> pub extern;

        operator /(lhs: i16, rhs: i16): i16 -> pub extern;

        operator %(lhs: i16, rhs: i16): i16 -> pub extern;

        operator +(lhs: i16, rhs: i16): i16 -> pub extern;

        operator -(lhs: i16, rhs: i16): i16 -> pub extern;

        operator >>(lhs: i16, rhs: i16): i16 -> pub extern;

        operator <<(lhs: i16, rhs: i16): i16 -> pub extern;

        operator <(lhs: i16, rhs: i16): bool -> pub extern;

        operator >(lhs: i16, rhs: i16): bool -> pub extern;

        operator <=(lhs: i16, rhs: i16): bool -> pub extern;

        operator >=(lhs: i16, rhs: i16): bool -> pub extern;

        operator ==(lhs: i16, rhs: i16): bool -> pub extern;

        operator !=(lhs: i16, rhs: i16): bool -> pub extern;

        operator &(lhs: i16, rhs: i16): i16 -> pub extern;

        operator ^(lhs: i16, rhs: i16): i16 -> pub extern;

        operator |(lhs: i16, rhs: i16): i16 -> pub extern;
    }

    Int32: struct -> pub {
    }

    impl i32 {
        from_i8(value: i8): i32 -> pub extern;

        from_i16(value: i16): i32 -> pub extern;

        from_i64(value: i64): i32 -> pub extern;

        from_u8(value: u8): i32 -> pub extern;

        from_u16(value: u16): i32 -> pub extern;

        from_u32(value: u32): i32 -> pub extern;

        from_u64(value: u64): i32 -> pub extern;

        from_int(value: int): i32 -> pub extern;

        from_f32(value: f32): i32 -> pub extern;

        from_f64(value: f64): i32 -> pub extern;

        operator +(self: i32): i32 -> pub extern;

        operator -(self: i32): i32 -> pub extern;

        operator ~(self: i32): i32 -> pub extern;

        operator *(lhs: i32, rhs: i32): i32 -> pub extern;

        operator /(lhs: i32, rhs: i32): i32 -> pub extern;

        operator %(lhs: i32, rhs: i32): i32 -> pub extern;

        operator +(lhs: i32, rhs: i32): i32 -> pub extern;

        operator -(lhs: i32, rhs: i32): i32 -> pub extern;

        operator >>(lhs: i32, rhs: i32): i32 -> pub extern;

        operator <<(lhs: i32, rhs: i32): i32 -> pub extern;

        operator <(lhs: i32, rhs: i32): bool -> pub extern;

        operator >(lhs: i32, rhs: i32): bool -> pub extern;

        operator <=(lhs: i32, rhs: i32): bool -> pub extern;

        operator >=(lhs: i32, rhs: i32): bool -> pub extern;

        operator ==(lhs: i32, rhs: i32): bool -> pub extern;

        operator !=(lhs: i32, rhs: i32): bool -> pub extern;

        operator &(lhs: i32, rhs: i32): i32 -> pub extern;

        operator ^(lhs: i32, rhs: i32): i32 -> pub extern;

        operator |(lhs: i32, rhs: i32): i32 -> pub extern;
    }

    Int64: struct -> pub {
    }

    impl i64 {
        from_i8(value: i8): i64 -> pub extern;

        from_i16(value: i16): i64 -> pub extern;

        from_i32(value: i32): i64 -> pub extern;

        from_u8(value: u8): i64 -> pub extern;

        from_u16(value: u16): i64 -> pub extern;

        from_u32(value: u32): i64 -> pub extern;

        from_u64(value: u64): i64 -> pub extern;
        
        from_int(value: int): i64 -> pub extern;

        from_f32(value: f32): i64 -> pub extern;

        from_f64(value: f64): i64 -> pub extern;

        operator +(self: i64): i64 -> pub extern;

        operator -(self: i64): i64 -> pub extern;

        operator ~(self: i64): i64 -> pub extern;

        operator *(lhs: i64, rhs: i64): i64 -> pub extern;

        operator /(lhs: i64, rhs: i64): i64 -> pub extern;

        operator %(lhs: i64, rhs: i64): i64 -> pub extern;

        operator +(lhs: i64, rhs: i64): i64 -> pub extern;

        operator -(lhs: i64, rhs: i64): i64 -> pub extern;

        operator >>(lhs: i64, rhs: i64): i64 -> pub extern;

        operator <<(lhs: i64, rhs: i64): i64 -> pub extern;

        operator <(lhs: i64, rhs: i64): bool -> pub extern;

        operator >(lhs: i64, rhs: i64): bool -> pub extern;

        operator <=(lhs: i64, rhs: i64): bool -> pub extern;

        operator >=(lhs: i64, rhs: i64): bool -> pub extern;

        operator ==(lhs: i64, rhs: i64): bool -> pub extern;

        operator !=(lhs: i64, rhs: i64): bool -> pub extern;

        operator &(lhs: i64, rhs: i64): i64 -> pub extern;

        operator ^(lhs: i64, rhs: i64): i64 -> pub extern;

        operator |(lhs: i64, rhs: i64): i64 -> pub extern;
    }

    UInt8: struct -> pub {
    }

    impl u8 {
        from_i8(value: i8): u8 -> pub extern;

        from_i16(value: i16): u8 -> pub extern;

        from_i32(value: i32): u8 -> pub extern;

        from_i64(value: i64): u8 -> pub extern;

        from_u16(value: u16): u8 -> pub extern;

        from_u32(value: u32): u8 -> pub extern;

        from_u64(value: u64): u8 -> pub extern;
        
        from_int(value: int): u8 -> pub extern;

        from_f32(value: f32): u8 -> pub extern;

        from_f64(value: f64): u8 -> pub extern;

        operator +(self: u8): u8 -> pub extern;

        operator -(self: u8): u8 -> pub extern;

        operator ~(self: u8): u8 -> pub extern;

        operator *(lhs: u8, rhs: u8): u8 -> pub extern;

        operator /(lhs: u8, rhs: u8): u8 -> pub extern;

        operator %(lhs: u8, rhs: u8): u8 -> pub extern;

        operator +(lhs: u8, rhs: u8): u8 -> pub extern;

        operator -(lhs: u8, rhs: u8): u8 -> pub extern;

        operator >>(lhs: u8, rhs: u8): u8 -> pub extern;

        operator <<(lhs: u8, rhs: u8): u8 -> pub extern;

        operator <(lhs: u8, rhs: u8): bool -> pub extern;

        operator >(lhs: u8, rhs: u8): bool -> pub extern;

        operator <=(lhs: u8, rhs: u8): bool -> pub extern;

        operator >=(lhs: u8, rhs: u8): bool -> pub extern;

        operator ==(lhs: u8, rhs: u8): bool -> pub extern;

        operator !=(lhs: u8, rhs: u8): bool -> pub extern;

        operator &(lhs: u8, rhs: u8): u8 -> pub extern;

        operator ^(lhs: u8, rhs: u8): u8 -> pub extern;

        operator |(lhs: u8, rhs: u8): u8 -> pub extern;
    }

    UInt16: struct -> pub { 
    }

    impl u16 {
        from_i8(value: i8): u16 -> pub extern;

        from_i16(value: i16): u16 -> pub extern;

        from_i32(value: i32): u16 -> pub extern;

        from_i64(value: i64): u16 -> pub extern;

        from_u8(value: u8): u16 -> pub extern;

        from_u32(value: u32): u16 -> pub extern;

        from_u64(value: u64): u16 -> pub extern;
        
        from_int(value: int): u16 -> pub extern;

        from_f32(value: f32): u16 -> pub extern;

        from_f64(value: f64): u16 -> pub extern;

        operator +(self: u16): u16 -> pub extern;

        operator -(self: u16): u16 -> pub extern;

        operator ~(self: u16): u16 -> pub extern;

        operator *(lhs: u16, rhs: u16): u16 -> pub extern;

        operator /(lhs: u16, rhs: u16): u16 -> pub extern;

        operator %(lhs: u16, rhs: u16): u16 -> pub extern;

        operator +(lhs: u16, rhs: u16): u16 -> pub extern;

        operator -(lhs: u16, rhs: u16): u16 -> pub extern;

        operator >>(lhs: u16, rhs: u16): u16 -> pub extern;

        operator <<(lhs: u16, rhs: u16): u16 -> pub extern;

        operator <(lhs: u16, rhs: u16): bool -> pub extern;

        operator >(lhs: u16, rhs: u16): bool -> pub extern;

        operator <=(lhs: u16, rhs: u16): bool -> pub extern;

        operator >=(lhs: u16, rhs: u16): bool -> pub extern;

        operator ==(lhs: u16, rhs: u16): bool -> pub extern;

        operator !=(lhs: u16, rhs: u16): bool -> pub extern;

        operator &(lhs: u16, rhs: u16): u16 -> pub extern;

        operator ^(lhs: u16, rhs: u16): u16 -> pub extern;

        operator |(lhs: u16, rhs: u16): u16 -> pub extern;
    }

    UInt32: struct -> pub {
    }

    impl u32 {
        from_i8(value: i8): u32 -> pub extern;

        from_i16(value: i16): u32 -> pub extern;

        from_i32(value: i32): u32 -> pub extern;

        from_i64(value: i64): u32 -> pub extern;

        from_u8(value: u8): u32 -> pub extern;

        from_u16(value: u16): u32 -> pub extern;

        from_u64(value: u64): u32 -> pub extern;

        from_int(value: int): u32 -> pub extern;

        from_f32(value: f32): u32 -> pub extern;

        from_f64(value: f64): u32 -> pub extern;

        operator +(self: u32): u32 -> pub extern;

        operator -(self: u32): u32 -> pub extern;

        operator ~(self: u32): u32 -> pub extern;

        operator *(lhs: u32, rhs: u32): u32 -> pub extern;

        operator /(lhs: u32, rhs: u32): u32 -> pub extern;

        operator %(lhs: u32, rhs: u32): u32 -> pub extern;

        operator +(lhs: u32, rhs: u32): u32 -> pub extern;

        operator -(lhs: u32, rhs: u32): u32 -> pub extern;

        operator >>(lhs: u32, rhs: u32): u32 -> pub extern;

        operator <<(lhs: u32, rhs: u32): u32 -> pub extern;

        operator <(lhs: u32, rhs: u32): bool -> pub extern;

        operator >(lhs: u32, rhs: u32): bool -> pub extern;

        operator <=(lhs: u32, rhs: u32): bool -> pub extern;

        operator >=(lhs: u32, rhs: u32): bool -> pub extern;

        operator ==(lhs: u32, rhs: u32): bool -> pub extern;

        operator !=(lhs: u32, rhs: u32): bool -> pub extern;

        operator &(lhs: u32, rhs: u32): u32 -> pub extern;

        operator ^(lhs: u32, rhs: u32): u32 -> pub extern;

        operator |(lhs: u32, rhs: u32): u32 -> pub extern;
    }

    UInt64: struct -> pub {
    }

    impl u64 {
        from_i8(value: i8): u64 -> pub extern;

        from_i16(value: i16): u64 -> pub extern;

        from_i32(value: i32): u64 -> pub extern;

        from_i64(value: i64): u64 -> pub extern;

        from_u8(value: u8): u64 -> pub extern;

        from_u16(value: u16): u64 -> pub extern;

        from_u32(value: u32): u64 -> pub extern;

        from_int(value: int): u64 -> pub extern;

        from_f32(value: f32): u64 -> pub extern;

        from_f64(value: f64): u64 -> pub extern;

        operator +(self: u64): u64 -> pub extern;

        operator -(self: u64): u64 -> pub extern;

        operator ~(self: u64): u64 -> pub extern;

        operator *(lhs: u64, rhs: u64): u64 -> pub extern;

        operator /(lhs: u64, rhs: u64): u64 -> pub extern;

        operator %(lhs: u64, rhs: u64): u64 -> pub extern;

        operator +(lhs: u64, rhs: u64): u64 -> pub extern;

        operator -(lhs: u64, rhs: u64): u64 -> pub extern;

        operator >>(lhs: u64, rhs: u64): u64 -> pub extern;

        operator <<(lhs: u64, rhs: u64): u64 -> pub extern;

        operator <(lhs: u64, rhs: u64): bool -> pub extern;

        operator >(lhs: u64, rhs: u64): bool -> pub extern;

        operator <=(lhs: u64, rhs: u64): bool -> pub extern;

        operator >=(lhs: u64, rhs: u64): bool -> pub extern;

        operator ==(lhs: u64, rhs: u64): bool -> pub extern;

        operator !=(lhs: u64, rhs: u64): bool -> pub extern;

        operator &(lhs: u64, rhs: u64): u64 -> pub extern;

        operator ^(lhs: u64, rhs: u64): u64 -> pub extern;

        operator |(lhs: u64, rhs: u64): u64 -> pub extern;
    }

    Int: struct -> pub {
    }

    impl int {
        from_i8(value: i8): int -> pub extern;

        from_i16(value: i16): int -> pub extern;

        from_i32(value: i32): int -> pub extern;

        from_i64(value: i64): int -> pub extern;

        from_u8(value: u8): int -> pub extern;

        from_u16(value: u16): int -> pub extern;

        from_u32(value: u32): int -> pub extern;

        from_u64(value: u64): int -> pub extern;

        from_f32(value: f32): int -> pub extern;

        from_f64(value: f64): int -> pub extern;

        operator +(self: int): int -> pub extern;

        operator -(self: int): int -> pub extern;

        operator ~(self: int): int -> pub extern;

        operator *(lhs: int, rhs: int): int -> pub extern;

        operator /(lhs: int, rhs: int): int -> pub extern;

        operator %(lhs: int, rhs: int): int -> pub extern;

        operator +(lhs: int, rhs: int): int -> pub extern;

        operator -(lhs: int, rhs: int): int -> pub extern;

        operator >>(lhs: int, rhs: int): int -> pub extern;

        operator <<(lhs: int, rhs: int): int -> pub extern;

        operator <(lhs: int, rhs: int): bool -> pub extern;

        operator >(lhs: int, rhs: int): bool -> pub extern;

        operator <=(lhs: int, rhs: int): bool -> pub extern;

        operator >=(lhs: int, rhs: int): bool -> pub extern;

        operator ==(lhs: int, rhs: int): bool -> pub extern;

        operator !=(lhs: int, rhs: int): bool -> pub extern;

        operator &(lhs: int, rhs: int): int -> pub extern;

        operator ^(lhs: int, rhs: int): int -> pub extern;

        operator |(lhs: int, rhs: int): int -> pub extern;
    }
}