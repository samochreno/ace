pub ::
std: mod {
    pub ::
    Float32: struct { 
    }

    pub extern ::
    f32_from_i8(value: i8): f32;

    pub extern ::
    f32_from_i16(value: i16): f32;

    pub extern ::
    f32_from_i32(value: i32): f32;

    pub extern ::
    f32_from_i64(value: i64): f32;

    pub extern ::
    f32_from_u8(value: u8): f32;

    pub extern ::
    f32_from_u16(value: u16): f32;

    pub extern ::
    f32_from_u32(value: u32): f32;

    pub extern ::
    f32_from_u64(value: u64): f32;

    pub extern ::
    f32_from_int(value: int): f32;

    pub extern ::
    f32_from_f64(value: f64): f32;

    pub extern ::
    f32_unary_plus(value: f32): f32;

    pub extern ::
    f32_unary_negation(value: f32): f32;

    pub extern ::
    f32_multiplication(lhs: f32, rhs: f32): f32;

    pub extern ::
    f32_division(lhs: f32, rhs: f32): f32;

    pub extern ::
    f32_remainder(lhs: f32, rhs: f32): f32;

    pub extern ::
    f32_addition(lhs: f32, rhs: f32): f32;

    pub extern ::
    f32_subtraction(lhs: f32, rhs: f32): f32;

    pub extern ::
    f32_less_than(lhs: f32, rhs: f32): bool;

    pub extern ::
    f32_greater_than(lhs: f32, rhs: f32): bool;

    pub extern ::
    f32_less_than_equals(lhs: f32, rhs: f32): bool;

    pub extern ::
    f32_greater_than_equals(lhs: f32, rhs: f32): bool;

    pub extern ::
    f32_equals(lhs: f32, rhs: f32): bool;

    pub extern ::
    f32_not_equals(lhs: f32, rhs: f32): bool;

    pub ::
    Float64: struct { 
    }

    pub extern ::
    f64_from_i8(value: i8): f64;

    pub extern ::
    f64_from_i16(value: i16): f64;

    pub extern ::
    f64_from_i32(value: i32): f64;

    pub extern ::
    f64_from_i64(value: i64): f64;

    pub extern ::
    f64_from_u8(value: u8): f64;

    pub extern ::
    f64_from_u16(value: u16): f64;

    pub extern ::
    f64_from_u32(value: u32): f64;

    pub extern ::
    f64_from_u64(value: u64): f64;

    pub extern ::
    f64_from_int(value: int): f64;

    pub extern ::
    f64_from_f32(value: f32): f64;

    pub extern ::
    f64_unary_plus(value: f64): f64;

    pub extern ::
    f64_unary_negation(value: f64): f64;

    pub extern ::
    f64_multiplication(lhs: f64, rhs: f64): f64;

    pub extern ::
    f64_division(lhs: f64, rhs: f64): f64;

    pub extern ::
    f64_remainder(lhs: f64, rhs: f64): f64;

    pub extern ::
    f64_addition(lhs: f64, rhs: f64): f64;

    pub extern ::
    f64_subtraction(lhs: f64, rhs: f64): f64;

    pub extern ::
    f64_less_than(lhs: f64, rhs: f64): bool;

    pub extern ::
    f64_greater_than(lhs: f64, rhs: f64): bool;

    pub extern ::
    f64_less_than_equals(lhs: f64, rhs: f64): bool;

    pub extern ::
    f64_greater_than_equals(lhs: f64, rhs: f64): bool;

    pub extern ::
    f64_equals(lhs: f64, rhs: f64): bool;

    pub extern ::
    f64_not_equals(lhs: f64, rhs: f64): bool;
}
